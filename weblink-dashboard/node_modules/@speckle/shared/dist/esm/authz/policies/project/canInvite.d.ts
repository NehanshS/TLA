import { MaybeUserContext, ProjectContext } from '../../domain/context.js';
import { AuthCheckContextLoaderKeys } from '../../domain/loaders.js';
import { AuthPolicy } from '../../domain/policies.js';
import { ServerNoAccessError, ServerNoSessionError, WorkspaceSsoSessionNoAccessError, WorkspaceNoAccessError, ProjectNoAccessError, ProjectNotFoundError, ServerNotEnoughPermissionsError, ProjectNotEnoughPermissionsError, WorkspaceNotEnoughPermissionsError, PersonalProjectsLimitedError } from '../../domain/authErrors.js';
type PolicyLoaderKeys = typeof AuthCheckContextLoaderKeys.getEnv | typeof AuthCheckContextLoaderKeys.getServerRole | typeof AuthCheckContextLoaderKeys.getProject | typeof AuthCheckContextLoaderKeys.getProjectRole | typeof AuthCheckContextLoaderKeys.getWorkspace | typeof AuthCheckContextLoaderKeys.getWorkspaceRole | typeof AuthCheckContextLoaderKeys.getWorkspaceSsoProvider | typeof AuthCheckContextLoaderKeys.getWorkspaceSsoSession;
type PolicyArgs = MaybeUserContext & ProjectContext;
type PolicyErrors = InstanceType<typeof ServerNoAccessError> | InstanceType<typeof ServerNoSessionError> | InstanceType<typeof ServerNotEnoughPermissionsError> | InstanceType<typeof ProjectNoAccessError> | InstanceType<typeof ProjectNotFoundError> | InstanceType<typeof ProjectNotEnoughPermissionsError> | InstanceType<typeof WorkspaceSsoSessionNoAccessError> | InstanceType<typeof WorkspaceNoAccessError> | InstanceType<typeof WorkspaceNotEnoughPermissionsError> | InstanceType<typeof PersonalProjectsLimitedError>;
export declare const canInviteToProjectPolicy: AuthPolicy<PolicyLoaderKeys, PolicyArgs, PolicyErrors>;
export {};
//# sourceMappingURL=canInvite.d.ts.map