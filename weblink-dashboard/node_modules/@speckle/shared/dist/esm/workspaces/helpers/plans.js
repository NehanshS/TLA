import { throwUncoveredError } from '../../core/helpers/error.js';
export const PaidWorkspacePlans = {
    Team: 'team', // actually 'Starter'
    TeamUnlimited: 'teamUnlimited',
    Pro: 'pro', // actually 'Business'
    ProUnlimited: 'proUnlimited'
};
export const UnpaidWorkspacePlans = {
    TeamUnlimitedInvoiced: 'teamUnlimitedInvoiced',
    ProUnlimitedInvoiced: 'proUnlimitedInvoiced',
    Unlimited: 'unlimited',
    Academia: 'academia',
    Free: 'free'
};
export const WorkspacePlans = {
    ...PaidWorkspacePlans,
    ...UnpaidWorkspacePlans
};
export const doesPlanIncludeUnlimitedProjectsAddon = (plan) => {
    switch (plan) {
        case 'teamUnlimited':
        case 'proUnlimited':
            return true;
        case 'free':
        case 'team':
        case 'pro':
        case 'teamUnlimitedInvoiced':
        case 'proUnlimitedInvoiced':
        case 'unlimited':
        case 'academia':
            return false;
        default:
            throwUncoveredError(plan);
    }
};
export const isSelfServeAvailablePlan = (plan) => {
    switch (plan) {
        case 'free':
        case 'team':
        case 'teamUnlimited':
        case 'pro':
        case 'proUnlimited':
            return true;
        case 'teamUnlimitedInvoiced':
        case 'proUnlimitedInvoiced':
        case 'unlimited':
        case 'academia':
            return false;
        default:
            throwUncoveredError(plan);
    }
};
export const isPaidPlan = (plan) => {
    switch (plan) {
        case 'team':
        case 'teamUnlimited':
        case 'pro':
        case 'proUnlimited':
            return true;
        case 'free':
        case 'teamUnlimitedInvoiced':
        case 'proUnlimitedInvoiced':
        case 'unlimited':
        case 'academia':
            return false;
        default:
            throwUncoveredError(plan);
    }
};
/**
 * BILLING INTERVALS
 */
export const WorkspacePlanBillingIntervals = {
    Monthly: 'monthly',
    Yearly: 'yearly'
};
/**
 * PLAN STATUSES
 */
export const UnpaidWorkspacePlanStatuses = {
    Valid: 'valid'
};
export const PaidWorkspacePlanStatuses = {
    ...UnpaidWorkspacePlanStatuses,
    PaymentFailed: 'paymentFailed',
    CancelationScheduled: 'cancelationScheduled',
    Canceled: 'canceled'
};
export const WorkspacePlanStatuses = {
    ...PaidWorkspacePlanStatuses,
    ...UnpaidWorkspacePlanStatuses
};
export const isWorkspacePlanStatusReadOnly = (status) => {
    switch (status) {
        case 'cancelationScheduled':
        case 'valid':
        case 'paymentFailed':
            return false;
        case 'canceled':
            return true;
        default:
            throwUncoveredError(status);
    }
};
//# sourceMappingURL=plans.js.map