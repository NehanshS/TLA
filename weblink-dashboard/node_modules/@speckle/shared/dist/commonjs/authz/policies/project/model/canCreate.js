"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.canCreateModelPolicy = void 0;
const result_1 = require("true-myth/result");
const authErrors_js_1 = require("../../../domain/authErrors.js");
const projects_js_1 = require("../../../fragments/projects.js");
const workspaces_js_1 = require("../../../fragments/workspaces.js");
const canCreateModelPolicy = (loaders) => async ({ userId, projectId }) => {
    // Ensure general write access
    const ensureWriteAccess = await (0, projects_js_1.ensureImplicitProjectMemberWithWriteAccessFragment)(loaders)({
        userId,
        projectId
    });
    if (ensureWriteAccess.isErr) {
        return (0, result_1.err)(ensureWriteAccess.error);
    }
    // Ensure (workspace?) accepts models
    const ensuredModelsAccepted = await (0, workspaces_js_1.ensureModelCanBeCreatedFragment)(loaders)({
        projectId,
        userId
    });
    if (ensuredModelsAccepted.isErr) {
        return (0, result_1.err)(ensuredModelsAccepted.error);
    }
    // Prevent personal project models, if personal projects limited
    const project = await loaders.getProject({ projectId });
    const env = await loaders.getEnv();
    if (project && !project.workspaceId && env.FF_PERSONAL_PROJECTS_LIMITS_ENABLED) {
        return (0, result_1.err)(new authErrors_js_1.PersonalProjectsLimitedError('No new models can be added to personal projects'));
    }
    return (0, result_1.ok)();
};
exports.canCreateModelPolicy = canCreateModelPolicy;
//# sourceMappingURL=canCreate.js.map