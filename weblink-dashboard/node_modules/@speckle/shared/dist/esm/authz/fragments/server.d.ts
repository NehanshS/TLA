import { MaybeUserContext } from '../domain/context.js';
import { Loaders } from '../domain/loaders.js';
import { AuthPolicyCheckFragment, AuthPolicyEnsureFragment } from '../domain/policies.js';
import { ServerNoAccessError, ServerNoSessionError, ServerNotEnoughPermissionsError } from '../domain/authErrors.js';
import { ServerRoles } from '../../core/constants.js';
/**
 * Ensure user has a minimum server role
 */
export declare const ensureMinimumServerRoleFragment: AuthPolicyEnsureFragment<typeof Loaders.getServerRole, MaybeUserContext & {
    /**
     * Defaults to lowest role - server Guest
     */
    role?: ServerRoles;
}, InstanceType<typeof ServerNoAccessError | typeof ServerNoSessionError | typeof ServerNotEnoughPermissionsError>>;
/**
 * Check if user has admin override enabled
 */
export declare const checkIfAdminOverrideEnabledFragment: AuthPolicyCheckFragment<typeof Loaders.getAdminOverrideEnabled | typeof Loaders.getServerRole, MaybeUserContext, never>;
//# sourceMappingURL=server.d.ts.map