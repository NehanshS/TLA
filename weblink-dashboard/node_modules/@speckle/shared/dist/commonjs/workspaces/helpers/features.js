"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.workspaceReachedPlanLimit = exports.workspaceExceedsPlanLimit = exports.WorkspacePlanConfigs = exports.WorkspaceUnpaidPlanConfigs = exports.WorkspacePaidPlanConfigs = exports.WorkspacePlanFeaturesMetadata = exports.WorkspacePlanFeatures = void 0;
const plans_js_1 = require("./plans.js");
/**
 * WORKSPACE FEATURES
 */
exports.WorkspacePlanFeatures = {
    // Core features pretty much available to everyone
    AutomateBeta: 'automateBeta',
    DomainDiscoverability: 'domainDiscoverability',
    // Optional/plan specific
    DomainSecurity: 'domainBasedSecurityPolicies',
    SSO: 'oidcSso',
    CustomDataRegion: 'workspaceDataRegionSpecificity',
    HideSpeckleBranding: 'hideSpeckleBranding'
};
exports.WorkspacePlanFeaturesMetadata = {
    [exports.WorkspacePlanFeatures.AutomateBeta]: {
        displayName: 'Automate beta access',
        description: 'Run custom automations on every new model version'
    },
    [exports.WorkspacePlanFeatures.DomainDiscoverability]: {
        displayName: 'Domain discoverability',
        description: 'Allow people to discover your workspace if they use a verified company email'
    },
    [exports.WorkspacePlanFeatures.DomainSecurity]: {
        displayName: 'Domain protection',
        description: 'Require workspace members to use a verified company email'
    },
    [exports.WorkspacePlanFeatures.SSO]: {
        displayName: 'Single Sign-On (SSO)',
        description: 'Require workspace members to authenticate with your SSO provider'
    },
    [exports.WorkspacePlanFeatures.CustomDataRegion]: {
        displayName: 'Custom data residency',
        description: 'Store your data in EU, UK, North America, or Asia Pacific'
    },
    [exports.WorkspacePlanFeatures.HideSpeckleBranding]: {
        displayName: 'Customised viewer',
        description: 'Hide the Speckle branding in embedded viewer'
    }
};
const unlimited = {
    projectCount: null,
    modelCount: null,
    versionsHistory: null,
    commentHistory: null
};
const baseFeatures = [
    exports.WorkspacePlanFeatures.AutomateBeta,
    exports.WorkspacePlanFeatures.DomainDiscoverability
];
exports.WorkspacePaidPlanConfigs = {
    [plans_js_1.PaidWorkspacePlans.Team]: {
        plan: plans_js_1.PaidWorkspacePlans.Team,
        features: [...baseFeatures],
        limits: {
            projectCount: 5,
            modelCount: 25,
            versionsHistory: { value: 30, unit: 'day' },
            commentHistory: { value: 30, unit: 'day' }
        }
    },
    [plans_js_1.PaidWorkspacePlans.TeamUnlimited]: {
        plan: plans_js_1.PaidWorkspacePlans.TeamUnlimited,
        features: [...baseFeatures],
        limits: {
            projectCount: null,
            modelCount: null,
            versionsHistory: { value: 30, unit: 'day' },
            commentHistory: { value: 30, unit: 'day' }
        }
    },
    [plans_js_1.PaidWorkspacePlans.Pro]: {
        plan: plans_js_1.PaidWorkspacePlans.Pro,
        features: [
            ...baseFeatures,
            exports.WorkspacePlanFeatures.DomainSecurity,
            exports.WorkspacePlanFeatures.SSO,
            exports.WorkspacePlanFeatures.CustomDataRegion,
            exports.WorkspacePlanFeatures.HideSpeckleBranding
        ],
        limits: {
            projectCount: 10,
            modelCount: 50,
            versionsHistory: null,
            commentHistory: null
        }
    },
    [plans_js_1.PaidWorkspacePlans.ProUnlimited]: {
        plan: plans_js_1.PaidWorkspacePlans.ProUnlimited,
        features: [
            ...baseFeatures,
            exports.WorkspacePlanFeatures.DomainSecurity,
            exports.WorkspacePlanFeatures.SSO,
            exports.WorkspacePlanFeatures.CustomDataRegion,
            exports.WorkspacePlanFeatures.HideSpeckleBranding
        ],
        limits: {
            projectCount: null,
            modelCount: null,
            versionsHistory: null,
            commentHistory: null
        }
    }
};
exports.WorkspaceUnpaidPlanConfigs = {
    [plans_js_1.UnpaidWorkspacePlans.Unlimited]: {
        plan: plans_js_1.UnpaidWorkspacePlans.Unlimited,
        features: [
            ...baseFeatures,
            exports.WorkspacePlanFeatures.DomainSecurity,
            exports.WorkspacePlanFeatures.SSO,
            exports.WorkspacePlanFeatures.CustomDataRegion,
            exports.WorkspacePlanFeatures.HideSpeckleBranding
        ],
        limits: unlimited
    },
    [plans_js_1.UnpaidWorkspacePlans.Academia]: {
        plan: plans_js_1.UnpaidWorkspacePlans.Academia,
        features: [
            ...baseFeatures,
            exports.WorkspacePlanFeatures.DomainSecurity,
            exports.WorkspacePlanFeatures.SSO,
            exports.WorkspacePlanFeatures.CustomDataRegion,
            exports.WorkspacePlanFeatures.HideSpeckleBranding
        ],
        limits: unlimited
    },
    [plans_js_1.UnpaidWorkspacePlans.TeamUnlimitedInvoiced]: {
        ...exports.WorkspacePaidPlanConfigs.teamUnlimited,
        plan: plans_js_1.UnpaidWorkspacePlans.TeamUnlimitedInvoiced
    },
    [plans_js_1.UnpaidWorkspacePlans.ProUnlimitedInvoiced]: {
        ...exports.WorkspacePaidPlanConfigs.proUnlimited,
        plan: plans_js_1.UnpaidWorkspacePlans.ProUnlimitedInvoiced
    },
    [plans_js_1.UnpaidWorkspacePlans.Free]: {
        plan: plans_js_1.UnpaidWorkspacePlans.Free,
        features: baseFeatures,
        limits: {
            projectCount: 1,
            modelCount: 5,
            versionsHistory: { value: 7, unit: 'day' },
            commentHistory: { value: 7, unit: 'day' }
        }
    }
};
exports.WorkspacePlanConfigs = {
    ...exports.WorkspacePaidPlanConfigs,
    ...exports.WorkspaceUnpaidPlanConfigs
};
/**
 * Checks if a workspace exceeds its plan limits for projects and models
 */
const workspaceExceedsPlanLimit = (plan, projectCount, modelCount) => {
    if (!plan)
        return false;
    const planConfig = exports.WorkspacePlanConfigs[plan];
    if (!planConfig)
        return false;
    const limits = planConfig.limits;
    if (!limits.projectCount || !limits.modelCount)
        return false;
    if (!projectCount || !modelCount)
        return false;
    return projectCount > limits.projectCount || modelCount > limits.modelCount;
};
exports.workspaceExceedsPlanLimit = workspaceExceedsPlanLimit;
/**
 * Checks if a workspace reached its plan limits for projects and models
 */
const workspaceReachedPlanLimit = (plan, projectCount, modelCount) => {
    if (!plan)
        return false;
    const planConfig = exports.WorkspacePlanConfigs[plan];
    if (!planConfig)
        return false;
    const limits = planConfig.limits;
    if (!limits.projectCount || !limits.modelCount)
        return false;
    return projectCount === limits.projectCount || modelCount === limits.modelCount;
};
exports.workspaceReachedPlanLimit = workspaceReachedPlanLimit;
//# sourceMappingURL=features.js.map