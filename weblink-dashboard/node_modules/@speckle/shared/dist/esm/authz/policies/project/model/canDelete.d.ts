import { MaybeUserContext, ModelContext, ProjectContext } from '../../../domain/context.js';
import { AuthPolicy } from '../../../domain/policies.js';
import { Loaders } from '../../../domain/loaders.js';
import { ReservedModelNotDeletableError, ModelNotFoundError, ProjectNoAccessError, ProjectNotFoundError, ServerNoAccessError, ServerNoSessionError, WorkspaceNoAccessError, WorkspaceSsoSessionNoAccessError, ProjectNotEnoughPermissionsError, WorkspaceNotEnoughPermissionsError, ServerNotEnoughPermissionsError } from '../../../domain/authErrors.js';
export declare const canDeleteModelPolicy: AuthPolicy<typeof Loaders.getModel | typeof Loaders.getProject | typeof Loaders.getServerRole | typeof Loaders.getEnv | typeof Loaders.getWorkspaceRole | typeof Loaders.getWorkspace | typeof Loaders.getWorkspaceSsoProvider | typeof Loaders.getWorkspaceSsoSession | typeof Loaders.getProjectRole, ProjectContext & MaybeUserContext & ModelContext, InstanceType<typeof ProjectNoAccessError | typeof ProjectNotFoundError | typeof WorkspaceNoAccessError | typeof ServerNoAccessError | typeof ServerNoSessionError | typeof WorkspaceSsoSessionNoAccessError | typeof ModelNotFoundError | typeof ReservedModelNotDeletableError | typeof WorkspaceNotEnoughPermissionsError | typeof ProjectNotEnoughPermissionsError | typeof ServerNotEnoughPermissionsError>>;
//# sourceMappingURL=canDelete.d.ts.map