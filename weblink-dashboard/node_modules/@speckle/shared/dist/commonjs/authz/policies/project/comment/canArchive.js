"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.canArchiveProjectCommentPolicy = void 0;
const result_1 = require("true-myth/result");
const authErrors_js_1 = require("../../../domain/authErrors.js");
const projects_js_1 = require("../../../fragments/projects.js");
const constants_js_1 = require("../../../../core/constants.js");
const canCreate_js_1 = require("./canCreate.js");
const canArchiveProjectCommentPolicy = (loaders) => async ({ userId, commentId, projectId }) => {
    // Includes canCreate check (checks general comment write access,
    // cause just owning a comment is not enough, if you've been banned from it)
    const canCreate = await (0, canCreate_js_1.canCreateProjectCommentPolicy)(loaders)({
        userId,
        projectId
    });
    if (canCreate.isErr) {
        return (0, result_1.err)(canCreate.error);
    }
    // Check that comment exists
    const comment = await loaders.getComment({ commentId, projectId });
    if (!comment)
        return (0, result_1.err)(new authErrors_js_1.CommentNotFoundError());
    // If user is owner, no extra checks necessary
    if (comment.authorId === userId)
        return (0, result_1.ok)();
    // Otherwise Ensure proper project owner level write access
    const ensuredWriteAccess = await (0, projects_js_1.ensureImplicitProjectMemberWithWriteAccessFragment)(loaders)({
        userId,
        projectId,
        role: constants_js_1.Roles.Stream.Owner
    });
    if (ensuredWriteAccess.isErr) {
        return (0, result_1.err)(ensuredWriteAccess.error);
    }
    return (0, result_1.ok)();
};
exports.canArchiveProjectCommentPolicy = canArchiveProjectCommentPolicy;
//# sourceMappingURL=canArchive.js.map