"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.canUpdateEmbedOptionsPolicy = void 0;
const result_1 = require("true-myth/result");
const authErrors_js_1 = require("../../domain/authErrors.js");
const workspaces_js_1 = require("../../fragments/workspaces.js");
const server_js_1 = require("../../fragments/server.js");
const constants_js_1 = require("../../../core/constants.js");
const canUpdateEmbedOptionsPolicy = (loaders) => async ({ userId, workspaceId }) => {
    const ensuredWorkspacesEnabled = await (0, workspaces_js_1.ensureWorkspacesEnabledFragment)(loaders)({});
    if (ensuredWorkspacesEnabled.isErr)
        return (0, result_1.err)(ensuredWorkspacesEnabled.error);
    const ensuredServerRole = await (0, server_js_1.ensureMinimumServerRoleFragment)(loaders)({
        userId,
        role: constants_js_1.Roles.Server.User
    });
    if (ensuredServerRole.isErr)
        return (0, result_1.err)(ensuredServerRole.error);
    const ensuredWorkspaceAccess = await (0, workspaces_js_1.ensureWorkspaceRoleAndSessionFragment)(loaders)({
        userId: userId,
        workspaceId,
        role: constants_js_1.Roles.Workspace.Admin
    });
    if (ensuredWorkspaceAccess.isErr)
        return (0, result_1.err)(ensuredWorkspaceAccess.error);
    const ensuredNotReadOnly = await (0, workspaces_js_1.ensureWorkspaceNotReadOnlyFragment)(loaders)({
        workspaceId
    });
    if (ensuredNotReadOnly.isErr)
        return (0, result_1.err)(ensuredNotReadOnly.error);
    const validPlans = [
        'academia',
        'unlimited',
        'pro',
        'proUnlimited',
        'proUnlimitedInvoiced'
    ];
    const workspacePlan = await loaders.getWorkspacePlan({ workspaceId });
    if (!workspacePlan || !validPlans.includes(workspacePlan.name))
        return (0, result_1.err)(new authErrors_js_1.WorkspaceNoFeatureAccessError());
    return (0, result_1.ok)();
};
exports.canUpdateEmbedOptionsPolicy = canUpdateEmbedOptionsPolicy;
//# sourceMappingURL=canUpdateEmbedOptions.js.map