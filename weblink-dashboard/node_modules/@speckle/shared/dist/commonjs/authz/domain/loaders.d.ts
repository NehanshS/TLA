import { OverrideProperties } from 'type-fest';
import { MaybeAsync } from '../../core/index.js';
import type { GetServerRole } from './core/operations.js';
import type { GetProject, GetProjectModelCount, GetProjectRole, GetProjectRoleCounts } from './projects/operations.js';
import type { GetAdminOverrideEnabled, GetEnv, GetWorkspace, GetWorkspaceLimits, GetWorkspaceModelCount, GetWorkspacePlan, GetWorkspaceProjectCount, GetWorkspaceRole, GetWorkspaceSeat, GetWorkspaceSsoProvider, GetWorkspaceSsoSession } from './workspaces/operations.js';
import { GetComment } from './comments/operations.js';
import { GetModel } from './models/operations.js';
import { GetVersion } from './versions/operations.js';
type PromiseAll<T> = {
    [K in keyof T]: T[K] extends (...args: infer Args) => MaybeAsync<infer Return> ? (...args: Args) => Promise<Return> : never;
};
type AuthContextLoaderMappingDefinition<Mapping extends {
    [Key in keyof Mapping]: Key extends AuthCheckContextLoaderKeys ? Mapping[Key] : never;
}> = PromiseAll<OverrideProperties<{
    [key in AuthCheckContextLoaderKeys]: unknown;
}, Mapping>>;
/**
 * All loaders must be listed here for app startup validation to work properly
 */
export declare const AuthCheckContextLoaderKeys: {
    readonly getEnv: "getEnv";
    readonly getProject: "getProject";
    readonly getProjectRoleCounts: "getProjectRoleCounts";
    readonly getProjectRole: "getProjectRole";
    readonly getProjectModelCount: "getProjectModelCount";
    readonly getServerRole: "getServerRole";
    readonly getWorkspace: "getWorkspace";
    readonly getWorkspaceRole: "getWorkspaceRole";
    readonly getWorkspaceSeat: "getWorkspaceSeat";
    readonly getWorkspaceModelCount: "getWorkspaceModelCount";
    readonly getWorkspaceProjectCount: "getWorkspaceProjectCount";
    readonly getWorkspacePlan: "getWorkspacePlan";
    readonly getWorkspaceLimits: "getWorkspaceLimits";
    readonly getWorkspaceSsoProvider: "getWorkspaceSsoProvider";
    readonly getWorkspaceSsoSession: "getWorkspaceSsoSession";
    readonly getAdminOverrideEnabled: "getAdminOverrideEnabled";
    readonly getComment: "getComment";
    readonly getModel: "getModel";
    readonly getVersion: "getVersion";
};
export declare const Loaders: {
    readonly getEnv: "getEnv";
    readonly getProject: "getProject";
    readonly getProjectRoleCounts: "getProjectRoleCounts";
    readonly getProjectRole: "getProjectRole";
    readonly getProjectModelCount: "getProjectModelCount";
    readonly getServerRole: "getServerRole";
    readonly getWorkspace: "getWorkspace";
    readonly getWorkspaceRole: "getWorkspaceRole";
    readonly getWorkspaceSeat: "getWorkspaceSeat";
    readonly getWorkspaceModelCount: "getWorkspaceModelCount";
    readonly getWorkspaceProjectCount: "getWorkspaceProjectCount";
    readonly getWorkspacePlan: "getWorkspacePlan";
    readonly getWorkspaceLimits: "getWorkspaceLimits";
    readonly getWorkspaceSsoProvider: "getWorkspaceSsoProvider";
    readonly getWorkspaceSsoSession: "getWorkspaceSsoSession";
    readonly getAdminOverrideEnabled: "getAdminOverrideEnabled";
    readonly getComment: "getComment";
    readonly getModel: "getModel";
    readonly getVersion: "getVersion";
};
export type AuthCheckContextLoaderKeys = (typeof AuthCheckContextLoaderKeys)[keyof typeof AuthCheckContextLoaderKeys];
export type AllAuthCheckContextLoaders = AuthContextLoaderMappingDefinition<{
    getEnv: GetEnv;
    getAdminOverrideEnabled: GetAdminOverrideEnabled;
    getProject: GetProject;
    getProjectRole: GetProjectRole;
    getProjectRoleCounts: GetProjectRoleCounts;
    getProjectModelCount: GetProjectModelCount;
    getServerRole: GetServerRole;
    getWorkspace: GetWorkspace;
    getWorkspaceRole: GetWorkspaceRole;
    getWorkspaceLimits: GetWorkspaceLimits;
    getWorkspacePlan: GetWorkspacePlan;
    getWorkspaceSeat: GetWorkspaceSeat;
    getWorkspaceProjectCount: GetWorkspaceProjectCount;
    getWorkspaceModelCount: GetWorkspaceModelCount;
    getWorkspaceSsoProvider: GetWorkspaceSsoProvider;
    getWorkspaceSsoSession: GetWorkspaceSsoSession;
    getComment: GetComment;
    getModel: GetModel;
    getVersion: GetVersion;
}>;
export type AuthCheckContextLoaders<LoaderKeys extends AuthCheckContextLoaderKeys = AuthCheckContextLoaderKeys> = Pick<AllAuthCheckContextLoaders, LoaderKeys>;
export type AuthCheckContext<LoaderKeys extends AuthCheckContextLoaderKeys> = {
    loaders: AuthCheckContextLoaders<LoaderKeys>;
};
export {};
//# sourceMappingURL=loaders.d.ts.map