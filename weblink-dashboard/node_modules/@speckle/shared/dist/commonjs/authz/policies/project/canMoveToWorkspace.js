"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.canMoveToWorkspacePolicy = void 0;
const result_1 = require("true-myth/result");
const authErrors_js_1 = require("../../domain/authErrors.js");
const constants_js_1 = require("../../../core/constants.js");
const workspaces_js_1 = require("../../fragments/workspaces.js");
const server_js_1 = require("../../fragments/server.js");
const projects_js_1 = require("../../fragments/projects.js");
const canMoveToWorkspacePolicy = (loaders) => async ({ userId, projectId, workspaceId }) => {
    const ensuredWorkspacesEnabled = await (0, workspaces_js_1.ensureWorkspacesEnabledFragment)(loaders)({});
    if (ensuredWorkspacesEnabled.isErr)
        return (0, result_1.err)(ensuredWorkspacesEnabled.error);
    const ensuredServerRole = await (0, server_js_1.ensureMinimumServerRoleFragment)(loaders)({
        userId,
        role: constants_js_1.Roles.Server.User
    });
    if (ensuredServerRole.isErr)
        return (0, result_1.err)(ensuredServerRole.error);
    if (projectId) {
        // We do not support moving projects that are already in a workspace
        const project = await loaders.getProject({ projectId });
        if (!project)
            return (0, result_1.err)(new authErrors_js_1.ProjectNotFoundError());
        if (!!project.workspaceId)
            return (0, result_1.err)(new authErrors_js_1.WorkspaceProjectMoveInvalidError());
        const ensuredProjectRole = await (0, projects_js_1.ensureMinimumProjectRoleFragment)(loaders)({
            userId: userId,
            projectId,
            role: constants_js_1.Roles.Stream.Owner
        });
        if (ensuredProjectRole.isErr) {
            return (0, result_1.err)(ensuredProjectRole.error);
        }
    }
    if (workspaceId) {
        const ensuredWorkspaceAccess = await (0, workspaces_js_1.ensureWorkspaceRoleAndSessionFragment)(loaders)({
            userId: userId,
            workspaceId,
            role: constants_js_1.Roles.Workspace.Admin
        });
        if (ensuredWorkspaceAccess.isErr)
            return (0, result_1.err)(ensuredWorkspaceAccess.error);
        // Ensure workspace accepts new projects
        const ensuredProjectsAccepted = await (0, workspaces_js_1.ensureWorkspaceProjectCanBeCreatedFragment)(loaders)({
            workspaceId,
            userId
        });
        if (ensuredProjectsAccepted.isErr) {
            return (0, result_1.err)(ensuredProjectsAccepted.error);
        }
    }
    if (workspaceId && projectId) {
        // Check whether this specific project can be moved to the workspace
        // Does it maybe have too many models?
        const projectModelCount = await loaders.getProjectModelCount({
            projectId
        });
        const ensuredModelsAccepted = await (0, workspaces_js_1.ensureModelCanBeCreatedFragment)(loaders)({
            projectId,
            userId,
            addedModelCount: projectModelCount,
            workspaceId
        });
        if (ensuredModelsAccepted.isErr) {
            return (0, result_1.err)(ensuredModelsAccepted.error);
        }
    }
    return (0, result_1.ok)();
};
exports.canMoveToWorkspacePolicy = canMoveToWorkspacePolicy;
//# sourceMappingURL=canMoveToWorkspace.js.map