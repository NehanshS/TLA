import { err, ok } from 'true-myth/result';
import { WorkspaceNoFeatureAccessError } from '../../domain/authErrors.js';
import { ensureWorkspaceNotReadOnlyFragment, ensureWorkspaceRoleAndSessionFragment, ensureWorkspacesEnabledFragment } from '../../fragments/workspaces.js';
import { ensureMinimumServerRoleFragment } from '../../fragments/server.js';
import { Roles } from '../../../core/constants.js';
export const canUpdateEmbedOptionsPolicy = (loaders) => async ({ userId, workspaceId }) => {
    const ensuredWorkspacesEnabled = await ensureWorkspacesEnabledFragment(loaders)({});
    if (ensuredWorkspacesEnabled.isErr)
        return err(ensuredWorkspacesEnabled.error);
    const ensuredServerRole = await ensureMinimumServerRoleFragment(loaders)({
        userId,
        role: Roles.Server.User
    });
    if (ensuredServerRole.isErr)
        return err(ensuredServerRole.error);
    const ensuredWorkspaceAccess = await ensureWorkspaceRoleAndSessionFragment(loaders)({
        userId: userId,
        workspaceId,
        role: Roles.Workspace.Admin
    });
    if (ensuredWorkspaceAccess.isErr)
        return err(ensuredWorkspaceAccess.error);
    const ensuredNotReadOnly = await ensureWorkspaceNotReadOnlyFragment(loaders)({
        workspaceId
    });
    if (ensuredNotReadOnly.isErr)
        return err(ensuredNotReadOnly.error);
    const validPlans = [
        'academia',
        'unlimited',
        'pro',
        'proUnlimited',
        'proUnlimitedInvoiced'
    ];
    const workspacePlan = await loaders.getWorkspacePlan({ workspaceId });
    if (!workspacePlan || !validPlans.includes(workspacePlan.name))
        return err(new WorkspaceNoFeatureAccessError());
    return ok();
};
//# sourceMappingURL=canUpdateEmbedOptions.js.map