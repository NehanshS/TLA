import { err, ok } from 'true-myth/result';
import { PersonalProjectsLimitedError } from '../../domain/authErrors.js';
import { ensureMinimumServerRoleFragment } from '../../fragments/server.js';
import { Roles } from '../../../core/constants.js';
import { ensureImplicitProjectMemberWithWriteAccessFragment } from '../../fragments/projects.js';
export const canInviteToProjectPolicy = (loaders) => async ({ userId, projectId }) => {
    const ensuredServerRole = await ensureMinimumServerRoleFragment(loaders)({
        userId,
        role: Roles.Server.User
    });
    if (ensuredServerRole.isErr)
        return err(ensuredServerRole.error);
    const ensuredProjectRole = await ensureImplicitProjectMemberWithWriteAccessFragment(loaders)({
        userId: userId,
        projectId,
        role: Roles.Stream.Owner
    });
    if (ensuredProjectRole.isErr)
        return err(ensuredProjectRole.error);
    const env = await loaders.getEnv();
    const project = await loaders.getProject({ projectId });
    if (project && !project.workspaceId && env.FF_PERSONAL_PROJECTS_LIMITS_ENABLED) {
        // Prevent inviting collaborators to personal projects
        return err(new PersonalProjectsLimitedError({
            message: 'No new collaborators can be added to personal projects'
        }));
    }
    return ok();
};
//# sourceMappingURL=canInvite.js.map