import { err, ok } from 'true-myth/result';
import { PersonalProjectsLimitedError } from '../../../domain/authErrors.js';
import { ensureImplicitProjectMemberWithWriteAccessFragment } from '../../../fragments/projects.js';
import { ensureModelCanBeCreatedFragment } from '../../../fragments/workspaces.js';
export const canCreateModelPolicy = (loaders) => async ({ userId, projectId }) => {
    // Ensure general write access
    const ensureWriteAccess = await ensureImplicitProjectMemberWithWriteAccessFragment(loaders)({
        userId,
        projectId
    });
    if (ensureWriteAccess.isErr) {
        return err(ensureWriteAccess.error);
    }
    // Ensure (workspace?) accepts models
    const ensuredModelsAccepted = await ensureModelCanBeCreatedFragment(loaders)({
        projectId,
        userId
    });
    if (ensuredModelsAccepted.isErr) {
        return err(ensuredModelsAccepted.error);
    }
    // Prevent personal project models, if personal projects limited
    const project = await loaders.getProject({ projectId });
    const env = await loaders.getEnv();
    if (project && !project.workspaceId && env.FF_PERSONAL_PROJECTS_LIMITS_ENABLED) {
        return err(new PersonalProjectsLimitedError('No new models can be added to personal projects'));
    }
    return ok();
};
//# sourceMappingURL=canCreate.js.map