/**
  @module
  @internal
*/
/**
 * Check if the value here is an all-consuming monstrosity which will consume
 * everything in its transdimensional rage. A.k.a. `null` or `undefined`.
 *
 * @internal
 */
export declare const isVoid: (value: unknown) => value is null | undefined;
/** @internal */
export declare function curry1<T, U>(op: (t: T) => U, item?: T): U | ((t: T) => U);
export declare function safeToString(value: unknown): string;
/**
  This is the standard *correct* definition for a function which is a proper
  subtype of all other functions: parameters of a function subtype must be
  *wider* than those of the base type, and return types must be *narrower*.
  Everything is wider than `never[]` and narrower than `unknown`, so any
  function is assignable to places this is used.
 */
export declare type AnyFunction = (...params: never[]) => unknown;
//# sourceMappingURL=utils.d.ts.map